/*
 * (c) Copyright Christian P. Fries, Germany. Contact: email@christian-fries.de.
 *
 * Created on 16.01.2015
 */
package net.finmath.montecarlo.interestrate;

import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.time.LocalDate;
import java.time.Month;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Vector;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.FutureTask;

import org.junit.Assert;

import net.finmath.exception.CalculationException;
import net.finmath.functions.AnalyticFormulas;
import net.finmath.marketdata.calibration.ParameterObject;
import net.finmath.marketdata.calibration.Solver;
import net.finmath.marketdata.model.AnalyticModel;
import net.finmath.marketdata.model.AnalyticModelFromCurvesAndVols;
import net.finmath.marketdata.model.curves.Curve;
import net.finmath.marketdata.model.curves.CurveInterpolation.ExtrapolationMethod;
import net.finmath.marketdata.model.curves.CurveInterpolation.InterpolationEntity;
import net.finmath.marketdata.model.curves.CurveInterpolation.InterpolationMethod;
import net.finmath.marketdata.model.volatilities.AbstractVolatilitySurface;
import net.finmath.marketdata.model.curves.DiscountCurve;
import net.finmath.marketdata.model.curves.DiscountCurveFromForwardCurve;
import net.finmath.marketdata.model.curves.DiscountCurveInterpolation;
import net.finmath.marketdata.model.curves.ForwardCurve;
import net.finmath.marketdata.model.curves.ForwardCurveFromDiscountCurve;
import net.finmath.marketdata.model.curves.ForwardCurveInterpolation;
import net.finmath.marketdata.products.AnalyticProduct;
import net.finmath.marketdata.products.Swap;
import net.finmath.montecarlo.BrownianMotion;
import net.finmath.montecarlo.interestrate.models.HullWhiteModel;
import net.finmath.montecarlo.interestrate.models.LIBORMarketModelFromCovarianceModel;
import net.finmath.montecarlo.interestrate.models.LIBORMarketModelWithTenorRefinement;
import net.finmath.montecarlo.interestrate.models.covariance.AbstractLIBORCovarianceModelParametric;
import net.finmath.montecarlo.interestrate.models.covariance.BlendedLocalVolatilityModel;
import net.finmath.montecarlo.interestrate.models.covariance.DisplacedLocalVolatilityModel;
import net.finmath.montecarlo.interestrate.models.covariance.LIBORCorrelationModel;
import net.finmath.montecarlo.interestrate.models.covariance.LIBORCorrelationModelExponentialDecay;
import net.finmath.montecarlo.interestrate.models.covariance.LIBORCovarianceModelExponentialForm5Param;
import net.finmath.montecarlo.interestrate.models.covariance.LIBORCovarianceModelFromVolatilityAndCorrelation;
import net.finmath.montecarlo.interestrate.models.covariance.LIBORVolatilityModel;
import net.finmath.montecarlo.interestrate.models.covariance.LIBORVolatilityModelPiecewiseConstant;
import net.finmath.montecarlo.interestrate.models.covariance.LIBORVolatilityModelTimeHomogenousPiecewiseConstant;
import net.finmath.montecarlo.interestrate.models.covariance.LIBORVolatilityModelTimeHomogenousPiecewiseConstantWithMercurioModification;
import net.finmath.montecarlo.interestrate.models.covariance.ShortRateVolatilityModel;
import net.finmath.montecarlo.interestrate.models.covariance.ShortRateVolatilityModelAsGiven;
import net.finmath.montecarlo.interestrate.models.covariance.TermStructCovarianceModelFromLIBORCovarianceModelParametric;
import net.finmath.montecarlo.interestrate.models.covariance.TermStructureCovarianceModelParametric;
import net.finmath.montecarlo.interestrate.models.covariance.TermStructureTenorTimeScalingInterface;
import net.finmath.montecarlo.interestrate.models.covariance.TermStructureTenorTimeScalingPicewiseConstant;
import net.finmath.montecarlo.interestrate.products.AbstractLIBORMonteCarloProduct;
import net.finmath.montecarlo.interestrate.products.Caplet;
import net.finmath.montecarlo.interestrate.products.CapletOnBackwardLookingRate;
import net.finmath.montecarlo.interestrate.products.SwaptionSimple;
import net.finmath.montecarlo.interestrate.products.Caplet.ValueUnit;
import net.finmath.montecarlo.process.EulerSchemeFromProcessModel;
import net.finmath.optimizer.LevenbergMarquardt;
import net.finmath.optimizer.Optimizer;
import net.finmath.optimizer.OptimizerFactory;
import net.finmath.optimizer.OptimizerFactoryLevenbergMarquardt;
import net.finmath.optimizer.SolverException;
import net.finmath.stochastic.RandomVariable;
import net.finmath.time.Schedule;
import net.finmath.time.ScheduleGenerator;
import net.finmath.time.TimeDiscretization;
import net.finmath.time.TimeDiscretizationFromArray;
import net.finmath.time.TimeDiscretizationFromArray.ShortPeriodLocation;
import net.finmath.time.businessdaycalendar.BusinessdayCalendarExcludingTARGETHolidays;
import net.finmath.time.daycount.DayCountConvention_ACT_365;

/**
 * This class tests the LIBOR market model and products.
 *
 * @author Christian Fries
 */
public class LIBORMarketModelTimeHomogeneousCalibrationTest {

	private final int numberOfPaths		= 1;
	private final int numberOfFactors	= 1;

	private static DecimalFormat formatterValue		= new DecimalFormat(" ##0.0000%;-##0.0000%", new DecimalFormatSymbols(Locale.ENGLISH));
	private static DecimalFormat formatterParam		= new DecimalFormat(" #0.00000; -#0.00000", new DecimalFormatSymbols(Locale.ENGLISH));
	private static DecimalFormat formatterDeviation	= new DecimalFormat(" 0.00000E00;-0.00000E00", new DecimalFormatSymbols(Locale.ENGLISH));

	
	public static void main(final String[] args) throws CalculationException, SolverException {
		final LIBORMarketModelTimeHomogeneousCalibrationTest test = new LIBORMarketModelTimeHomogeneousCalibrationTest();
		test.testATMSwaptionCalibration();
	}

	//constructor
	public LIBORMarketModelTimeHomogeneousCalibrationTest() {}

	private CalibrationProduct createCalibrationItem(final double weight, final double exerciseDate, final double swapPeriodLength, final int numberOfPeriods, final double moneyness, final double targetVolatility, final String targetVolatilityType, final ForwardCurve forwardCurve, final DiscountCurve discountCurve) throws CalculationException {

		final double[]	fixingDates			= new double[numberOfPeriods];
		final double[]	paymentDates		= new double[numberOfPeriods];
		final double[]	swapTenor			= new double[numberOfPeriods + 1];

		for (int periodStartIndex = 0; periodStartIndex < numberOfPeriods; periodStartIndex++) {
			fixingDates[periodStartIndex] = exerciseDate + periodStartIndex * swapPeriodLength;
			paymentDates[periodStartIndex] = exerciseDate + (periodStartIndex + 1) * swapPeriodLength;
			swapTenor[periodStartIndex] = exerciseDate + periodStartIndex * swapPeriodLength;
		}
		swapTenor[numberOfPeriods] = exerciseDate + numberOfPeriods * swapPeriodLength;

		// Swaptions swap rate (Ã¨ lo STRIKE!)
		final double swaprate = moneyness + getParSwaprate(forwardCurve, discountCurve, swapTenor);

		// Set swap rates for each period
		final double[] swaprates = new double[numberOfPeriods];
		Arrays.fill(swaprates, swaprate);

		/*
		 * We use Monte-Carlo calibration on implied volatility.
		 * Alternatively you may change here to Monte-Carlo valuation on price or
		 * use an analytic approximation formula, etc.
		 */
		
		
		final SwaptionSimple swaptionMonteCarlo = new SwaptionSimple(swaprate, swapTenor, SwaptionSimple.ValueUnit.valueOf(targetVolatilityType));
		//double targetValuePrice = AnalyticFormulas.blackModelSwaptionValue(swaprate, targetVolatility, fixingDates[0], swaprate, getSwapAnnuity(discountCurve, swapTenor));
		return new CalibrationProduct(swaptionMonteCarlo, targetVolatility, weight);
/*	
* final caplet capletMonteCarlo = new caplet(.. ,capletMonteCarlo.ValueUnit.valueOf(targetVolatilityType))	
* e targetVolatility = blackScholesOptionImpliedVolatility() <--.functions.analyticFormula (see also caplet class)
* 
* public class CapletVolatilities extends AbstractVolatilitySurface {}
* final OptimizerFactory optimizerFactory = new OptimizerFactoryLevenbergMarquardt(maxIterations, accuracy, numberOfThreads);
* final Optimizer optimizer = optimizerFactory.getOptimizer(calibrationError, initialParameters, lowerBound, upperBound, parameterStep, zero);
* 
*/
	}
		public void testATMSwaptionCalibration() throws CalculationException, SolverException {
		/*
		 * Calibration test
		 */
		System.out.println("Calibration to Swaptions:");

		final AnalyticModel curveModel = getCalibratedCurve();

		// Create the forward curve (initial value of the LIBOR market model)
		final ForwardCurve forwardCurve = curveModel.getForwardCurve("ForwardCurveFromDiscountCurve(discountCurve-EUR,1D)");

		final DiscountCurve discountCurve = curveModel.getDiscountCurve("discountCurve-EUR");

		/*
		 * Create a set of calibration products.
		 */
		final ArrayList<String>			calibrationItemNames	= new ArrayList<>();
		final ArrayList<CalibrationProduct>	calibrationProducts		= new ArrayList<>();

		final double	swapPeriodLength	= 0.5;

		final String[] atmExpiries = {
				"1M", "1M", "1M", "1M", "1M", "1M", "1M", "1M", "1M", "1M", "1M", "1M", "1M", "1M",
				"2M", "2M", "2M", "2M", "2M", "2M", "2M", "2M", "2M", "2M", "2M", "2M", "2M", "2M", 
				"3M", "3M", "3M", "3M", "3M", "3M", "3M", "3M", "3M", "3M", "3M", "3M", "3M", "3M",
				"6M", "6M", "6M", "6M", "6M", "6M", "6M", "6M", "6M", "6M", "6M", "6M", "6M", "6M",
				"9M", "9M", "9M", "9M", "9M", "9M", "9M", "9M", "9M", "9M", "9M", "9M", "9M", "9M",
				"1Y", "1Y", "1Y", "1Y", "1Y", "1Y", "1Y", "1Y", "1Y", "1Y", "1Y", "1Y", "1Y", "1Y", 
				"18M", "18M", "18M", "18M", "18M", "18M", "18M", "18M", "18M", "18M", "18M", "18M", "18M", "18M",
				"2Y", "2Y", "2Y", "2Y", "2Y", "2Y", "2Y", "2Y", "2Y", "2Y", "2Y", "2Y", "2Y", "2Y",
				"3Y", "3Y", "3Y", "3Y", "3Y", "3Y", "3Y", "3Y", "3Y", "3Y", "3Y", "3Y", "3Y", "3Y", "4Y",
				"4Y", "4Y", "4Y", "4Y", "4Y", "4Y", "4Y", "4Y", "4Y", "4Y", "4Y", "4Y", "4Y", "5Y", "5Y", "5Y", "5Y",
				"5Y", "5Y", "5Y", "5Y", "5Y", "5Y", "5Y", "5Y", "5Y", "5Y", "7Y", "7Y", "7Y", "7Y", "7Y", "7Y", "7Y",
				"7Y", "7Y", "7Y", "7Y", "7Y", "7Y", "7Y", "10Y", "10Y", "10Y", "10Y", "10Y", "10Y", "10Y", "10Y", "10Y",
				"10Y", "10Y", "10Y", "10Y", "10Y", "15Y", "15Y", "15Y", "15Y", "15Y", "15Y", "15Y", "15Y", "15Y", "15Y",
				"15Y", "15Y", "15Y", "15Y", "20Y", "20Y", "20Y", "20Y", "20Y", "20Y", "20Y", "20Y", "20Y", "20Y", "20Y",
				"20Y", "20Y", "20Y", "25Y", "25Y", "25Y", "25Y", "25Y", "25Y", "25Y", "25Y", "25Y", "25Y", "25Y", "25Y",
				"25Y", "25Y", "30Y", "30Y", "30Y", "30Y", "30Y", "30Y", "30Y", "30Y", "30Y", "30Y", "30Y", "30Y", "30Y", "30Y" };

		final String[] atmTenors = {
				"1Y", "2Y", "3Y", "4Y", "5Y", "6Y", "7Y", "8Y", "9Y", "10Y", "15Y", "20Y", "25Y", "30Y", 
				
				"1Y", "2Y", "3Y", "4Y", "5Y", "6Y", "7Y", "8Y", "9Y", "10Y", "15Y", "20Y", "25Y", "30Y",
				"1Y", "2Y", "3Y", "4Y", "5Y", "6Y", "7Y", "8Y", "9Y", "10Y", "15Y", "20Y", "25Y", "30Y",
				"1Y", "2Y", "3Y", "4Y", "5Y", "6Y", "7Y", "8Y", "9Y", "10Y", "15Y", "20Y", "25Y", "30Y",

				"1Y", "2Y","3Y", "4Y", "5Y", "6Y", "7Y", "8Y", "9Y", "10Y", "15Y", "20Y", "25Y", "30Y",
				"1Y", "2Y", "3Y", "4Y","5Y", "6Y", "7Y", "8Y", "9Y", "10Y", "15Y", "20Y", "25Y", "30Y", "1Y", "2Y", "3Y", "4Y", "5Y", "6Y",
				"7Y", "8Y", "9Y", "10Y", "15Y", "20Y", "25Y", "30Y", "1Y", "2Y", "3Y", "4Y", "5Y", "6Y", "7Y", "8Y",
				"9Y", "10Y", "15Y", "20Y", "25Y", "30Y", "1Y", "2Y", "3Y", "4Y", "5Y", "6Y", "7Y", "8Y", "9Y", "10Y",
				"15Y", "20Y", "25Y", "30Y", "1Y", "2Y", "3Y", "4Y", "5Y", "6Y", "7Y", "8Y", "9Y", "10Y", "15Y", "20Y",
				"25Y", "30Y", "1Y", "2Y", "3Y", "4Y", "5Y", "6Y", "7Y", "8Y", "9Y", "10Y", "15Y", "20Y", "25Y", "30Y",
				"1Y", "2Y", "3Y", "4Y", "5Y", "6Y", "7Y", "8Y", "9Y", "10Y", "15Y", "20Y", "25Y", "30Y", "1Y", "2Y",
				"3Y", "4Y", "5Y", "6Y", "7Y", "8Y", "9Y", "10Y", "15Y", "20Y", "25Y", "30Y", "1Y", "2Y", "3Y", "4Y",
				"5Y", "6Y", "7Y", "8Y", "9Y", "10Y", "15Y", "20Y", "25Y", "30Y", "1Y", "2Y", "3Y", "4Y", "5Y", "6Y",
				"7Y", "8Y", "9Y", "10Y", "15Y", "20Y", "25Y", "30Y", "1Y", "2Y", "3Y", "4Y", "5Y", "6Y", "7Y", "8Y",
				"9Y", "10Y", "15Y", "20Y", "25Y", "30Y", "1Y", "2Y", "3Y", "4Y", "5Y", "6Y", "7Y", "8Y", "9Y", "10Y",
				"15Y", "20Y", "25Y", "30Y" };

		final double[] atmNormalVolatilities = {
				0.0015335, 0.0015179, 0.0019499, 0.0024161, 0.0027817, 0.0031067, 0.0033722, 0.0035158, 0.0036656, 0.0037844, 0.00452, 0.0050913, 0.0054071, 0.0056496,
				//next is 2M
				0.0016709, 0.0016287, 0.0020182, 0.0024951, 0.002827, 0.0031023, 0.0034348, 0.0036183, 0.0038008, 0.0039155, 0.0046602, 0.0051981, 0.0055116, 0.0057249,
				
				0.0015543, 0.0016509, 0.0020863, 0.002587, 0.002949, 0.0032105, 0.0035338, 0.0037133, 0.0038475, 0.0040674, 0.0047458, 0.005276, 0.005476, 0.005793,
				0.0016777, 0.001937, 0.0023423, 0.0027823, 0.0031476, 0.0034569, 0.0037466, 0.0039852, 0.0041802, 0.0043221, 0.0049649, 0.0054206, 0.0057009, 0.0059071,
				//next is 9M
				0.0017809, 0.0020951, 0.0024978, 0.0029226, 0.0032379, 0.0035522, 0.0038397, 0.0040864, 0.0043122, 0.0044836, 0.0050939, 0.0054761, 0.0057374, 0.0059448,
				
				0.0020129, 0.0022865, 0.0027082, 0.0030921, 0.0033849, 0.0037107, 0.0039782, 0.0042058, 0.0044272, 0.0046082, 0.0051564, 0.0055307, 0.0057924, 0.0059811,
				//next is 18M
				0.0022824, 0.0025971, 0.0029895, 0.0033299, 0.0036346, 0.0039337, 0.0042153, 0.0044347, 0.0046686, 0.0048244, 0.0052739, 0.005604, 0.0058311, 0.0060011,
			
				0.0026477, 0.0029709, 0.0033639, 0.0036507, 0.0039096, 0.0041553, 0.0044241, 0.00462, 0.0048265, 0.004989, 0.005361, 0.0056565, 0.0058529, 0.0060102,
				0.003382, 0.0036593, 0.0039353, 0.0041484, 0.0043526, 0.0045677, 0.004775, 0.0049506, 0.0051159, 0.0052722, 0.0055185, 0.0057089, 0.0058555, 0.0059432,
				0.0040679, 0.0042363, 0.0044602, 0.0046206, 0.0047527, 0.0048998, 0.0050513, 0.0051928, 0.0053439, 0.0054657, 0.0056016, 0.0057244, 0.0058153, 0.0058793,
				0.0045508, 0.0046174, 0.0047712, 0.0048999, 0.0050364, 0.0051504, 0.0052623, 0.0053821, 0.0054941, 0.0055918, 0.0056569, 0.0057283, 0.0057752, 0.0058109,
				0.0051385, 0.0051373, 0.0052236, 0.005312, 0.0053793, 0.0054396, 0.0055037, 0.0055537, 0.0056213, 0.0056943, 0.005671, 0.0056707, 0.0056468, 0.0056423,
				0.0055069, 0.0054836, 0.0055329, 0.0055696, 0.005605, 0.0056229, 0.0056562, 0.005655, 0.0056679, 0.0057382, 0.0056494, 0.0055831, 0.0055096, 0.0054526,
				0.0054486, 0.0054057, 0.0054439, 0.005462, 0.0054915, 0.0054993, 0.0055134, 0.0054985, 0.0055318, 0.0055596, 0.005369, 0.0052513, 0.0051405, 0.0050416,
				0.005317, 0.005268, 0.005312, 0.0053112, 0.0053417, 0.0053556, 0.0053323, 0.0053251, 0.0053233, 0.0053126, 0.0050827, 0.004922, 0.0047924, 0.0046666,
				0.0051198, 0.0051013, 0.0051421, 0.0051418, 0.0051538, 0.005133, 0.0051081, 0.0050552, 0.005055, 0.0050473, 0.0048161, 0.0045965, 0.0044512, 0.0043099,
				0.0049482, 0.004947, 0.0049805, 0.0049951, 0.0050215, 0.0049849, 0.0049111, 0.0048498, 0.0047879, 0.0047688, 0.0044943, 0.0042786, 0.0041191, 0.0039756};


		final LocalDate referenceDate = LocalDate.of(2020, Month.JULY, 31);
		final BusinessdayCalendarExcludingTARGETHolidays cal = new BusinessdayCalendarExcludingTARGETHolidays();
		final DayCountConvention_ACT_365 modelDC = new DayCountConvention_ACT_365();
		for(int i=0; i<atmNormalVolatilities.length; i++ ) {

			final LocalDate exerciseDate = cal.getDateFromDateAndOffsetCode(referenceDate, atmExpiries[i]);
			final LocalDate tenorEndDate = cal.getDateFromDateAndOffsetCode(exerciseDate, atmTenors[i]);
			double	exercise		= modelDC.getDaycountFraction(referenceDate, exerciseDate); //periodo da oggi all'exercise date dello swaption
			double	tenor			= modelDC.getDaycountFraction(exerciseDate, tenorEndDate); //periodo dall'exercise date dello swaption alla fine dello swap product
			
			//round to long <-- ricordati che long Ã¨ il 64 bit int
			exercise = Math.round(exercise/0.25)*0.25;
			tenor = Math.round(tenor/0.25)*0.25;

			if(exercise < 0.25) {
				continue;
			}
			if(exercise < 1.0) {
				continue;
			}

			final int		numberOfPeriods     = (int) Math.round(tenor / swapPeriodLength);
			final double	moneyness			= 0.0;
			final double	targetVolatility	= atmNormalVolatilities[i];

			final String	targetVolatilityType = "VOLATILITYNORMAL";

			final double	weight = 1.0;

			//			if(exercise != 1.0 && (exercise+tenor < 30 || exercise+tenor >= 40)) weight = 0.01;
			//			if((exercise+tenor < 30 || exercise+tenor >= 40)) weight = 0.01;
			calibrationProducts.add(createCalibrationItem(weight, exercise, swapPeriodLength, numberOfPeriods, moneyness, targetVolatility, targetVolatilityType, forwardCurve, discountCurve));
			calibrationItemNames.add(atmExpiries[i]+"\t"+atmTenors[i]);
		}

//			final TimeDiscretization optionMaturityDiscretization = new TimeDiscretizationFromArray(0.0, 0.25, 0.50, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0, 40.0);
//			//optionMaturityDiscretization = simulationTimeDiscretization
//			TimeDiscretization timeToMaturityDiscretization = new TimeDiscretizationFromArray(0.00, 40, 1.0);
//			
//			final ArrayList<Double> timeToMaturityList = timeToMaturityDiscretization.getAsArrayList();
//			timeToMaturityList.add(0.25);
//			timeToMaturityList.add(0.50);
//			timeToMaturityList.add(0.75);
//			timeToMaturityDiscretization = new TimeDiscretizationFromArray(timeToMaturityList);
//
//			final double[] volatilityFineInitial = { 0.00188142173350013, 0.00244713812905251, 0.00312935232764786, 0.00424272403585511, 0.00561176019992977, 0.00568485209131756, 0.00683434262426612, 0.00755557139079009, 0.00771211664332339, 0.00824545731419025, 0.00861010546271496, 0.00774567189155376, 0.00756151667905925, 0.00716622512847832, 0.00680188750589074, 0.00698276842259019, 0.00673562900064002, 0.00736245353917806, 0.00793386630005653, 0.00774736825344931, 0.00703201120614119, 0.00689689547976478, 0.00693214319886021, 0.00679403321903707, 0.00689875296307854, 0.00723724500604481, 0.00679067514222039, 0.00701609275468305, 0.00671237185635425, 0.0061010213268778, 0.00639090714283796, 0.00591785251069359, 0.00547572428092251, 0.00452818855618976, 0.0040916097994791, 0.00506326717558218, 0.00447523023657468, 0.00380562299280579, 0.0033997609886344, 0.00157369148981344, 0.004, 0.00264668487730639, 0.00338358438549667, 0.0042583392466523, 0.00374251014853167, 0.00609664367488931, 0.00527491641895377, 0.00668315097703198, 0.00658202701405219, 0.00709801065756526, 0.00838042553100674, 0.00776896234056017, 0.00763102774582922, 0.00717721971340214, 0.00630362543200968, 0.00599253151486988, 0.00514204782796695, 0.00578960682825584, 0.00675665772559523, 0.00603929424704131, 0.00616580840780932, 0.00678814177521793, 0.00695349322073888, 0.00664405284337943, 0.00612446829351134, 0.00666094465333253, 0.00646524846239828, 0.00678975705219538, 0.00620950886390075, 0.00603812195184095, 0.00635765268485236, 0.00648999847163647, 0.0065402845256706, 0.00666109353707837, 0.00546149067254712, 0.00617349066597743, 0.0053197806621577, 0.00499758197738068, 0.00456967178656529, 0.00549217394102514, 0.004, 0.00412412862348145, 0.00360997813643166, 0.00481676441508378, 0.00442173545912594, 0.00626435623508068, 0.00490748817476142, 0.00745873785986973, 0.00627030538387987, 0.00603995044927501, 0.00707050614556265, 0.00808277626556295, 0.00714374328360619, 0.00667678601812034, 0.00604972234695157, 0.00429429262103971, 0.00477842598113308, 0.00583478068977273, 0.00570395559364015, 0.0053526504964704, 0.00580800537932058, 0.00561348824545989, 0.00483235138677368, 0.00554873189039507, 0.00524526349971304, 0.005110275849157, 0.00563323921458802, 0.00431021537816501, 0.00612095274226146, 0.00607222630125266, 0.0070207867102145, 0.00750607561405071, 0.00755101553992851, 0.00694551280489971, 0.00640251046333924, 0.0056583463253938, 0.00548564944007219, 0.0059362809916561, 0.010022429086807, 0.004, 0.00616465524445924, 0.0060194741377253, 0.0051515868776049, 0.00657705473695597, 0.0068820531698432, 0.00609478020957857, 0.00595194833262245, 0.00773773013331189, 0.00620603067736448, 0.00860041000265634, 0.0103714955260017, 0.00711409936312723, 0.00708490397224151, 0.00588614545075859, 0.00476822741196506, 0.0049249797906214, 0.00543872065493878, 0.00500218620026466, 0.00515646681969159, 0.00598922898075584, 0.00525394949034156, 0.00577209171498963, 0.00551211081588153, 0.00560892381073576, 0.00539597721127869, 0.00331362471109036, 0.00565077664923615, 0.00563266715477447, 0.00604349161423452, 0.00677268092065568, 0.00689029823433145, 0.00652434453656715, 0.00601450362015644, 0.00531049433504766, 0.00523967548428067, 0.00547120426275253, -0.00169670883759053, 0.004, 0.00682404350456255, 0.00675930436370809, 0.00534471722873658, 0.00659228819184702, 0.00548138103279273, 0.00669369679725406, 0.00528976217365383, 0.00789897557589221, 0.00510347852791096, 0.00868517525213428, 0.00836176024146618, 0.00816808466527832, 0.00679595780220292, 0.00534104826948273, 0.00443401432258604, 0.00516725665277164, 0.00455550155687438, 0.00516694150274943, 0.00622634160268162, 0.00543749614961861, 0.00589445102409619, 0.00613008761449019, 0.00549987898889946, 0.00587770649323352, 0.00541341048287516, 0.00492256772868173, 0.00482451314574211, 0.0044311830979994, 0.00532354748417067, 0.00504800515131747, 0.00495170632665564, 0.00538150801291063, 0.00462242464575121, 0.00413514271461505, 0.0036373147797081, -0.00195378506178586, 0.004, -0.197222484469832, 0.00626696027150197, 0.00552676863465162, 0.00540402131929257, 0.0055417967222204, 0.00514070546415228, 0.00473197076473461, 0.00535460847223553, 0.00447658651597976, 0.00750782960285101, 0.00755712431211006, 0.00620198564717612, 0.00437692785834355, 0.0026357748104504, 0.00373127246514, 0.00338447072006536, 0.00249017660932901, 0.00219493792926755, 0.000886416064192735, 0.00396800934108589, 0.00400387567622326, 0.00279081254689441, 0.00188456892939609, 0.000122667470926923, 0.0043881238544917, 0.00462899765423492, 0.00442815274857422, 0.00439771012641959, 0.00424063086758808, 0.00476637224080197, 0.0054040801853329, 0.00496393960945804, 0.0049014659862974, 0.00510887865003792, 0.00753551511998958, 0.004, 0.00600089469060071, 0.00531519990199881, 0.00565204942888863, 0.00532763837356964, 0.00501618432994098, 0.00492594213392192, 0.00559698190755737, 0.00461084121390951, 0.00681530395874622, 0.0076402678613766, 0.00622318152889423, 0.00493293616530465, 0.00368919642570353, 0.00432588286239437, 0.00353563111213374, 0.00326407483908194, 0.00344121740951852, 0.0019183247127117, 0.00470411107841229, 0.00482331079413266, 0.00415499318796653, 0.00373015182732561, 0.00235117185785453, 0.00421434154159793, 0.00350061462351939, 0.00310990364933925, 0.00316824645365618, 0.00164459036802477, 0.00402934548454256, 0.00515060329163864, 0.00438002737635865, 0.00416314580951372, 0.00378943063610239, 0.0210491352392416, 0.004, 0.0189846773797999, -0.0183387615658739, 0.00665993807873783, 0.00678237644387676, 0.00718086739590955, 0.00640397688334268, 0.00595962385957377, 0.00556680089907536, 0.00672242882927451, 0.00902285941034415, 0.0103753585107828, 0.0107896503436788, 0.00684201688207598, 0.00637048591780432, 0.004468240509815, 0.00351797221719007, 0.00124556830714796, 0.00538759627970082, 0.00528812242408913, 0.00342125527486584, 0.00218778990631438, 0.000585577720059274, 0.0057460194737967, 0.00513802760025306, 0.00343810471566253, 0.0014634108780903, -0.00063745034512957, -0.000179179052024604, 0.00444580295869898, 0.00547673206293821, 0.00653463642612653, 0.00617449845701861, -0.00484997751055757, 0.004, -0.16074721850062, 0.00620069252881296, 0.00625409069119784, 0.00656773324939692, 0.00591364979644733, 0.00551369213534098, 0.0051444882388198, 0.00600822928084645, 0.00775163683222475, 0.00880026883541508, 0.00895358327866209, 0.00593365732425627, 0.00563877987306613, 0.00429460320962464, 0.00344505667319563, 0.00203132491797663, 0.00502377258935102, 0.00519852484055304, 0.00426039670971861, 0.003159274763909, 0.00166268433610453, 0.00480637759852153, 0.00475627411593264, 0.00398376147396027, 0.00335143798554606, 0.00258677483153201, 0.00328978459023786, 0.00504326371713696, 0.00489819846759245, 0.00521822159465031, 0.00557888888039177, 0.00629722566415151, 0.004, 0.0062833734704122, 0.00644470507858546, 0.00677102384340264, 0.00597102303978095, 0.00558771259164609, 0.00508664479437948, 0.00582094769855885, 0.00737041419321413, 0.00808416467957846, 0.00816626141716939, 0.00622836882535576, 0.00617125193933055, 0.0038559085062547, 0.00286618604519527, 0.000462565675257915, 0.00499053772244887, 0.00460598022590686, 0.00372410616688586, 0.00128611185357028, 0.000696031971736591, 0.00483247638684995, 0.00415721810015557, 0.00247348119475523, 0.00181055981341248, 0.000428488318382846, 0.000247486801972927, 0.00292640411764009, 0.00374379254037987, 0.00425529189405349, 0.0039979945685008, 0.00457482451733148, 0.004, -0.134018679711584, -0.115735115419455, -0.115735115429311, -0.115735115417353, 0.00524927086613273, 0.00515362952240186, 0.00568454708983756, 0.00558456624654833, 0.00580012291775871, 0.00711310698884615, 0.00734038661928209, 0.00731264299439564, 0.00817329850180583, 0.00811193595515245, 0.00585924752358954, 0.00459034964003944, 0.00301640838920548, 0.00184987288158387, -0.000448959187163014, 0.00443786408989724, 0.00509192693327725, 0.00384214906341748, 0.00272340779075718, 0.00137419149165576, 0.0031388343641706, 0.00466704471959889, 0.00425824608039059, 0.00440904153751598, 0.00421819782947236, -0.00178943907970017, 0.004, 0.153084893035999, 0.111042750063195, 0.111042750080336, 0.00541226654759576, 0.00547544261368078, 0.00644325063511948, 0.00617408696781758, 0.00684081118159238, 0.0069419713771668, 0.00796266189336458, 0.00764917054935741, 0.00907708544163661, 0.008904706308452, 0.00677972970217715, 0.005245960248911, 0.00512059472947709, 0.00411373459469543, 0.00461969677184784, 0.0053052435499631, 0.00392469423260614, 0.000867293441495013, -0.000541190467158872, -0.000986920823345379, -0.00410231216263519, -0.000792923384355021, 0.00233349997450476, 0.0033540283837796, 0.00179243369973643, -0.00816334109015774, 0.004, -0.112168648541389, -0.0895613553951765, 0.00600325143287847, 0.0058842850949162, 0.00681490159584115, 0.00689898197602102, 0.00755293051956682, 0.00697441633930242, 0.00752951884442625, 0.00762445652524131, 0.00839424109367274, 0.00866802093018094, 0.0068898635904766, 0.00469263172536492, 0.00429348891109959, 0.00182945269169529, 0.00104504973487811, 0.00295812554739881, 0.00364991222229353, 0.00302741080687442, -0.00159079490412379, -0.00225685225154633, 0.00330906136340458, 0.0084377551240854, 0.0037697170394465, 0.00208233772942516, 0.0022438525413249, -0.00598826353189619, 0.004, 0.246603313911467, 0.00542401424153042, 0.00524554752668135, 0.00570084493653443, 0.00577870314529835, 0.00586865219201785, 0.00793978389568166, 0.00750017453100902, 0.00801647322038517, 0.00897338789082769, 0.00936900472776055, 0.00615748005743816, 0.00469838091358023, 0.0042649944198027, 0.00267659237455928, 0.00181301733066789, 0.00371869131987452, 0.00324952673251296, 0.00181953519265541, 0.000598418250498434, -0.00143590257865953, -0.000128400559433996, 0.0027745601361867, 0.00266887333841286, 0.00237781436204573, 0.00129116441308689, -0.0025243521459801, 0.004, 0.00540549023399865, 0.00546978661454686, 0.00630124752396011, 0.00608465661329026, 0.0066574387447782, 0.00688944223516516, 0.00807957816141563, 0.00777489344575464, 0.00930437155701677, 0.0095460087839841, 0.0056898848792815, 0.00513225131858054, 0.00394186925927661, 0.00362493377994459, 0.00219555541659419, 0.00369630467052962, 0.00270790609552732, 0.000549795423912195, -0.00132825171584076, -0.00249191495490888, -0.000101332520740995, 0.00333736770596378, 0.00229765100537349, 0.00164964689076992, 0.00085092084954786, -0.00372252151682471, 0.004, 0.201007852692451, -0.0127342164007155, -0.0127342163964287, -0.0127342163966136, 0.00480297703961716, 0.00573781323392882, 0.0061650607689565, 0.00400640871061565, 0.00504719171171648, 0.00603680695947247, 0.00672995731699367, 0.00736580287569749, 0.00841279457366484, 0.00905406781519812, 0.00670865408580991, 0.00861546752796367, 0.00834669199892589, 0.00825016714366856, 0.00725021895446231, 0.0064058540903628, 0.00505764539825815, 0.00428083274448697, 0.00432890885383873, 0.00341859005372526, -0.0194555490576774, 0.004, -0.190550019534513, -0.125378578756109, -0.125378578755967, 0.00467736246770524, 0.00569910322355304, 0.00592169355255533, 0.00405921302507087, 0.00535912902861615, 0.00623649448105408, 0.00706776606626972, 0.00788294315400603, 0.00971364013456496, 0.0107059873490125, 0.00490058164749244, 0.00456262832755202, 0.00356385625235498, 0.0034565143717254, 0.00157092953372462, 0.00121431290639782, 0.00154952219648425, 0.00118467505499431, 0.0004131975586109, -0.000699902401586334, -0.0342377537367556, 0.004, -0.0182521519679822, 0.065411029816537, 0.00495233956297924, 0.00702967837488282, 0.00700122769135017, 0.00362812387972704, 0.00732296050684732, 0.00698320109299191, 0.0078162738794499, 0.00893125547333946, 0.0108753050239391, 0.0117424700700635, 0.00586920922616124, 0.00633121669246589, 0.00552407179093373, 0.00636915846674222, 0.00597243270062556, 0.00200181169415653, 0.00112777665513735, 0.00163189358790245, 0.001447666618704, -0.00221626832649058, -0.0230820701409544, 0.004, 0.0697882947721137, 0.0049339327383482, 0.00565025938245767, 0.00624535792667892, 0.00459955153813207, 0.00534910070156601, 0.00655393378910615, 0.00725893539893254, 0.00767871744229052, 0.00935753960863785, 0.0102754521550055, 0.00563840019175984, 0.00460575972942088, 0.0050309261892919, 0.00445387995544703, 0.00210388226432139, 0.00250613521266417, 0.00251836352313703, 0.00162373849874021, 0.000609526720925567, -0.00027691615199658, -0.00909954480102535, 0.004, 0.00510196438145562, 0.00586338249723067, 0.00649871981448966, 0.00452444934911543, 0.00533176743249264, 0.00689746840266128, 0.00793159703707077, 0.00862583621584827, 0.0104098894094926, 0.012214544788938, 0.00516175103227768, 0.0045297117911066, 0.00402604411367467, 0.00406299301565469, 0.00283047696527217, 0.0018274784749506, 0.00213956923838279, 0.00141068797272239, 0.000560250005339239, -0.00121541051051462, -0.0304438890138148, 0.004, -0.180639517363353, -0.141024318706879, -0.141024318705057, -0.141024318712856, 0.00437219872442167, 0.00609653039419425, 0.00542242887424487, 0.00440794230531482, 0.00251041422761071, 0.00507347871822824, 0.00589464359501231, 0.00601054860050314, 0.00794137984880719, 0.00900074461209995, 0.00546367378831234, 0.00445327054692074, 0.0046184963438731, 0.00534191918158842, 0.00557780601638256, 0.0117883747651444, 0.004, -0.134813842076166, -0.078766190032586, -0.0787661900294195, 0.00414139362313966, 0.00578914930389675, 0.00567830290024663, 0.00450171144891663, 0.00190411399806994, 0.0055550257259982, 0.00593667800733581, 0.00657229929647184, 0.00745053586068448, 0.00766592403082185, 0.00692484995260122, 0.00479284385326522, 0.00436343834355784, 0.00462807167679338, 0.00509816454730392, 0.0126167571816246, 0.004, 0.15167986186512, 0.220773786220517, 0.00387038781829683, 0.00608993715554102, 0.00580939426154654, 0.00470095382749162, 0.00245984453764531, 0.0135705578078898, 0.00819169973112957, 0.0102111211140499, 0.0117832726693842, 0.0126503297055948, 0.0116572599209275, 0.00806543436308163, 0.00659492630254821, 0.00703377814684929, 0.00794932203019307, 0.0156759603193197, 0.004, 0.0962458734903418, 0.00474413533313822, 0.00659863599033649, 0.00669999283975872, 0.00498304459854345, 0.00372575472786237, 0.00591552722486111, 0.00673741419050148, 0.00724821542024324, 0.0095534949807549, 0.011296915238539, 0.00728923843833547, 0.00472134646775808, 0.00478377199562191, 0.00560708945972712, 0.00594773448114153, 0.0192083621487655, 0.004, 0.00442575360436979, 0.00599223816435319, 0.00570035936021275, 0.00412814288485424, 0.00143901404790231, 0.00662607902713897, 0.00599335302367598, 0.00589533363322908, 0.00683315583733948, 0.00609123911153978, 0.00300029583721264, 0.00235068570122878, 0.00304630244693257, 0.00338238932005341, 0.00273036191288129, 0.00345991687648601, 0.004, 0.282046574748334, 0.115347935312723, 0.115347935337489, 0.115347935312131, 0.00348957742798341, 0.00471690797915702, 0.00480084757131838, 0.00285399051633338, 0.0028312300197789, 0.00355849937942815, 0.00407725073937473, 0.00447230921594607, 0.00525579725053393, 0.00638689910397696, 0.00934185729900714, 0.004, 0.00982418122121637, 1.71382898596364, 1.71382898643197, 0.00370387845848235, 0.00526379001894508, 0.00519277014799883, 0.00323130372656083, 0.00352631784303996, 0.00419357057707047, 0.00448057239787154, 0.00478343130654781, 0.00574879502088379, 0.00712223269913981, 0.0147749184740494, 0.004, 0.484004739614467, 0.141555755811279, 0.00355786334851272, 0.00512141868669868, 0.00494770222580906, 0.00267247383184296, 0.00255391713134704, 0.00412539591162217, 0.0045242000604618, 0.00464386743627561, 0.00548274312946107, 0.00686371250421262, 0.0299857381881637, 0.004, -0.319428915895427, 0.00251783886548631, 0.00504093386325881, 0.0038481117246798, 0.00207952110680643, 0.0023105342871514, 0.00243253400392396, 0.00333824010070498, 0.00401865956915386, 0.00492592615107898, 0.00581416101019428, 0.0174477454594243, 0.004, 0.00334412396718098, 0.00530232529771076, 0.00580760365537931, 0.00337226579345837, 0.00343647572772882, 0.00417033556540962, 0.00450290123623779, 0.00491957325897116, 0.00601023235622087, 0.00790855522847006, 0.0142496665914079, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004 };
			double[] paramTimeScalingVolParam = { 0.09, 0.09, 0.09, 0.09, -0.001900851034611, -0.00419575274955029, -0.00442084917971079, -0.00424776052425492, 0.0013764351846531, -0.00424098708715426, -0.00432276020850956, -0.00484327828049977, -0.00350582260076357, 0.004103522850748, -0.0033822564678249, -0.00223657909794653, 0.00143883962989193, 0.00156242850096184, 0.000881836104654567, 0.000878353505005478, 0.00202916721414624, 0.00744677974748718, -0.00499777720394327, -0.0032375775025563, -0.00609439733504146, -0.00238708478822353, -0.00183051148761336, 0.00745903406524448, 0.00145028601939714, 0.00149330089465308, 0.00156737975294966, 0.00161404363808074, 0.00141793953028837, -0.0052268458202927, 0.00365425462942354, 0.00946325638395848, 0.00681170414948539, -0.000940158807611766, -0.00699719094804223, 0.0135496307619622, 0.0185688809967169, 0.0311470500521249, 0.0311443375311536, 0.0295441217680911, 0.011892840783714, 0.0105499541420107, 0.00980427909840784, 0.0108669835180354, -0.00103425214317539, -0.00132711749747869, -0.00136280556843658, -0.000492166651541481, -0.00684797314217561, -0.00716493781129585, -0.00716738015141388, -0.00795060850560716, -0.00805094521185637, -0.00798743825874311, -0.00774609653300004, -0.00857869815592934, 0.00482854937626569, 0.00197785983094334, 0.00280251478929372, 0.000213109666955375, -0.000596924822051647, 0.0123793060132364, 0.0157545703846876, -0.0011865071259416, -0.00559066498178182, -0.00458095318497953, -0.00532061024929078, -0.00671344086117528, -0.00900000000000005, -0.00721630270143222, -0.0058148332445711, -0.0065798467479648, -0.00833700942159353, -0.00478590931714208, -0.00679184440698776, -0.00865227523856503, -0.001362554514414, -0.00215421678503531, 0.00563395174074059, 0.00288830137075635, -0.00322590555903346, -0.00319071778582056, -0.00332317957646992, -0.00333655953685308, -0.00737945746580621, -0.00559783201459666, -0.0064796064969056, -0.00681079187296774, -0.00562770110641906, -0.00386385774918665, -0.00543514188911274, -0.00313767056339287, -0.00610601314773561, -0.00804130953605721, -0.0059856471488905, -0.0051825868236844, -0.00157742038394218, 0.00234885673931785, -0.00900000000000005, -0.00900000000000005, -0.00733946049440504, -0.00769440762248876, -0.00900000000000005, -0.00899617654774175, -0.00701160001265094, -0.00858582578346101, -0.00746246514379436, -0.00900000000000005, -0.00900000000000005, 0.000598322579645014, -0.00900000000000005, -0.00900000000000005, -0.00892773221649463, -0.00893756172546233, -0.00893395964777937, -0.00900000000000005, -0.00900000000000005, 0.00329899008574813, 0.00281093577300424, 0.00226508346888493, -0.00509846886780593, -0.00509846886780252, -0.00508223132113386, -0.00508223132113414, -0.00548312892577001, -0.0054831289257163, -0.0054950348199361, -0.00549503481997561, 0.0034570427157422, 0.00345704271559782, 0.00361842409308451, 0.00361842409316437, -0.0028284582869719, -0.0028284582867792, -0.00242531833401301, -0.00242531833380979, -0.00813797926683094, -0.00813797926681104, -0.00813699944417436, -0.00813699944416896, -0.00883451143820678, -0.00883451143820678, -0.0088348640358015, -0.00883486403580235, -0.00900000000000005, -0.00900000000000005, -0.00900000000000005, -0.00900000000000005, -0.00864709861410944, -0.00864709861410944, -0.00864798790067908, -0.00864798790067908, -0.00900000000000005, -0.00900000000000005, -0.00900000000000005, -0.00900000000000005, 0.004, -0.494432859305378, -0.494432859006778, -0.494432859307916, -0.00157456511415939, 1.21851090326318E-06, 0.0027202838940817, 0.00452697788832656, 0.00549810253240709, 0.010995027658776, 0.00333689489212563, 0.00197221982391949, 0.00141531726062687, -0.00188531949594071, 0.004, 0.004, 0.004, 0.004, -0.000141069120803055, 0.004, 0.004, 0.004, 0.004, -0.000387912613996856, 0.004, 0.004, 0.004, 0.004, -0.000270490730546011, 0.004, 0.004, 0.004, 0.004, -0.000938307181808428, 0.004, 0.004, 0.004, 0.004, -0.00113333707074173, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004, 1.10645690745991, 1.10645690723855, -0.000196522038430659, -0.000155975866775778, 0.00392811095533235, 0.00734455193779385, 0.00860604548768743, 0.0115863782454146, 0.0097501847215871, 0.0127380105057194, 0.0153888755271697, 0.000730431658179325, 0.004, 0.004, 0.004, 0.004, -0.000209317243014865, 0.004, 0.004, 0.004, 0.004, -0.000225865837606041, 0.004, 0.004, 0.004, 0.004, -0.000314735418794094, 0.004, 0.004, 0.004, 0.004, -0.000546643602310953, 0.004, 0.004, 0.004, 0.004, -0.00437598358073981, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004, 0.00389706087474156, 0.00375800084091632, 0.00384260482602033, 0.00487086422437719, 0.00440649505996209, 0.00326807613630755, 0.00363821688177974, 0.00178214622005669, 0.00459380269628534, 0.00337814431416731, 0.00148870087545478, 0.00347388051058275, -0.000150015736133534, 0.004, 0.004, 0.004, 0.00174036886717814, 0.004, 0.004, 0.004, 0.004, 0.00184685842633084, 0.004, 0.004, 0.004, 0.004, 0.00489521607373615, 0.004, 0.004, 0.004, 0.004, 0.000200747953398207, 0.004, 0.004, 0.004, 0.004, -0.000697283865190439, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004, -0.000915431872142883, 0.00923966021143272, 0.0056517320473431, 0.00433388821481831, 0.00318723142202518, 0.00340970571823595, 0.00422203922755135, 0.00453976680412294, 0.0046202877861286, 0.00473675955977054, -0.00015508535585088, 0.0101430947793994, -0.000200687523000682, 0.004, 0.004, 0.00192670843135786, -0.000170668681166593, 0.004, 0.004, 0.004, 0.00134722059955132, -0.000262884611492943, 0.004, 0.004, 0.004, 0.00591055345048618, -0.00194419654256857, 0.004, 0.004, 0.004, 0.0006059521491806, -0.000666125818866443, 0.004, 0.004, 0.004, -0.000848820207580652, -0.00202603929390789, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004, -0.00421963564488254, 0.0197061148874491, -0.000264471542406444, 0.00285455039246963, 0.00430789439341713, 0.00497175435171098, 0.00520666482053443, 0.00512970956948983, 0.00756654678975618, -0.000156210177176093, -0.000167385712828239, 0.0235174249487206, -0.00446261437531541, 0.004, -0.000137292454515056, -0.000113727761598494, 0.004, 0.004, 0.004, 0.00195878853690182, -0.00243036614907955, 0.004, 0.004, 0.004, -0.00012589615196831, -0.00149689910704691, 0.004, 0.004, 0.004, 0.00292208772529403, -0.000992719687024317, 0.004, 0.004, 0.004, -0.000578660129118478, -0.00154971276165391, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004, 0.00491898584259906, 0.00276870412397827, 0.00494455774812606, 0.00656766760623052, 0.00727402059485561, 0.00790510525317462, 0.00695734080343227, 0.00795911616244319, 0.00149771814724309, 0.0064872647513368, 0.00838941933783797, 0.0503795079249428, 0.133565403436032, 0.00118111799840934, -0.000111966052028284, 0.004, 0.004, 0.004, 0.00297489888596317, -0.000616551518766928, 0.004, 0.004, 0.004, 0.00469478817973125, -0.000769862434642523, 0.004, 0.004, 0.004, -0.00015699987838295, 0.0088374935085937, 0.004, 0.004, 0.004, 0.0202955256196721, -0.00152105472223549, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004, -0.00162485948842415, 0.00719031288216238, 0.0117184425418287, 0.00650778161041364, 0.00520731821545655, 0.00626210936476919, 0.00528387320775105, 0.00241329476750947, 0.00222541926230401, 0.00486105177918752, -0.000137992232836665, 0.0551088997284223, 0.00277581090829659, -0.000130489857128356, 0.004, 0.004, 0.004, -0.00105027521524037, 0.00421240391851075, 0.004, 0.004, 0.004, -0.000246495319370642, 0.00752914495257707, 0.004, 0.004, 0.004, -0.000455549647551561, 0.00391330861938618, 0.004, 0.004, 0.004, -0.00506357089028416, -0.00112587601697093, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004, 0.394658127207145, 0.132198623338349, 0.122779672297155, -0.000787701729946966, -0.000136773490015179, -0.000326350252038345, -0.000160577124974238, 0.00588741182298707, -3.31833880405605E-05, 0.0659420306907641, 0.119489865608271, 0.000906659443464936, -0.000460157995175247, 0.004, 0.004, 0.004, 0.00453739023451891, -0.00100206634666101, 0.004, 0.004, 0.004, 0.00403250216799566, -0.00119057735244476, 0.004, 0.004, 0.004, 0.00277244308388306, -0.000127162097771313, 0.004, 0.004, 0.004, -0.000168637450522381, -0.000698080659819837, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004, -0.000379259851061545, 0.008930926532953, 0.00705386419964922, 0.00368061212439558, 0.00349628921563389, 0.00184085339117002, 0.00252589965226819, 0.00297244615576368, 0.0148402531245904, 0.0175789399147927, 0.022328701157952, 0.0188790551362496, -0.000253005586834373, 0.004, 0.004, 0.000842464090188183, -0.000417509287812737, 0.004, 0.004, 0.004, -0.000219265001748337, -0.000642050739424298, 0.004, 0.004, 0.004, -0.000240190513843333, -0.00243004105821436, 0.004, 0.004, 0.004, -0.000338893840987368, -0.00391503152590853, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004, -0.109993601332107, -0.109993601311115, -0.109993601459089, -0.0133670221877993, 0.00232441190071383, -0.000128105395900993, 0.0107338200028579, -0.000130417550122584, 0.138246889117962, -0.00013023903862643, 0.020993427908333, 0.0230762421048228, 0.172880843964545, 0.004, -0.00348352964218206, 0.00411608259520258, 0.004, 0.004, 0.004, 0.0240751417424512, -0.000487442887420718, 0.004, 0.004, 0.004, -0.000607923747538089, -0.000740448669514782, 0.004, 0.004, 0.004, -0.000643336986985209, -0.000158910769727784, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004, 2.1227776026512, 2.25992582522148, 2.06331304123723, -0.000199345727005251, -0.000135482960452555, -0.00381441967855232, -0.000157566209191, -0.000952614525146895, 0.00789035617904118, -0.00029433404969332, 0.0121285401742267, 0.138783444344786, 0.0529849519358424, 0.00860490424520297, 0.00658248537022571, 0.004, 0.004, 0.004, 0.0181498454883923, -0.000186243234500176, 0.004, 0.004, 0.004, 0.0161619894432673, -0.000116094266358386, 0.004, 0.004, 0.004, 0.263742291098308, -0.00254706434660157, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004, 0.0204331793450363, 0.0240088328087552, 0.0118546874297609, 0.00645316827422745, 0.0300920966583917, 0.100868412150879, 0.230459456758348, 0.034301607706075, 0.00787222228670539, 0.0322862931710811, 0.107292222613912, 0.103550562241627, -0.000132681071538273, -0.000922380548960452, 0.004, 0.004, 0.004, -0.00287874326257359, 0.00099663634834937, 0.004, 0.004, 0.004, -0.00128150821598214, 0.00570938044135608, 0.004, 0.004, 0.004, -0.00208780047793811, -0.00180873055592343, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004, -0.000239936641638167, -0.000287603387052978, -0.00429263576586227, -0.000371451495500384, -0.00184959318433455, -0.000142838210890787, -0.000179925409573789, 4.68893898482993E-05, -0.000258226041305802, 0.0204605293928246, 0.00618641280580659, 0.0100777004107312, 0.00514965369473394, -0.000295356616052253, 0.00781644091887058, 0.00139384322772456, 0.00577230392273254, 0.00139463045314927, -0.00379759219133755, 0.00311785033020844, -0.000108243724912957, 0.00420175495115992, -0.00016454429682426, -0.00156292493154358, -0.000279465662044163, -0.000107542649539694, 0.0495656136591202, -0.00718763061288769, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004, 0.0957602894247488, 0.088505252712156, 0.084539296232394, -0.000326593022090893, 0.00910414712742187, 0.0238844279293658, -0.000214358210562323, 0.0125287260866412, 0.0160594427311772, 0.0117496109222664, 0.0230134245178559, -0.00044087903132657, 0.0462713370533124, -0.000115491702336862, -0.000157492029160331, 0.00308867046785184, -0.000334734023139097, 0.000305104920306903, -0.00442061855034225, -0.000586404099713766, -0.000246446717356828, -0.00274095313668139, -0.000334325688944815, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004, 0.0220838810096625, -0.000505982726252018, -0.00077412283945304, -0.00047165995860855, -0.000161014859172399, -0.00545669272342152, 0.0164948802518483, 0.0124610574303309, 0.0303527412281259, 0.046304097235554, -0.000112019943446957, 0.0178629056426194, 0.00779302599967594, 0.0108021572160552, 0.0398937599329156, -0.000215427682184859, 0.0303404569581742, 0.0565081117677152, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004, 0.802517658984342, -0.00794287927733691, -0.0442200662873663, -0.000112885343174783, -0.000199713996031243, -0.000211692984338995, 0.000337909961358949, -0.000123876763619046, 0.00134278687038659, -0.000220368768960302, 0.00121832676286868, -0.000138440355803643, 0.0517570250183169, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004 };	
//			//LIBORVolatilityModel volatilityModel = new LIBORVolatilityModelTimeHomogenousPiecewiseConstant(timeDiscretizationFromArray, liborPeriodDiscretization, new TimeDiscretizationFromArray(0.00, 0.50, 1.00, 2.00, 3.00, 4.00, 5.00, 7.00, 10.00, 15.00, 20.00, 25.00, 30.00 ), new double[] { 0.20/100.0, 0.20/100.0, 0.20/100.0, 0.20/100.0, 0.20/100.0, 0.20/100.0, 0.20/100.0, 0.20/100.0, 0.20/100.0, 0.20/100.0, 0.20/100.0, 0.20/100.0, 0.20/100.0 });
//			//LIBORVolatilityModel volatilityModel = new LIBORVolatilityModelPiecewiseConstant(timeDiscretizationFromArray, liborPeriodDiscretization, new TimeDiscretizationFromArray(0.00, 1.00, 2.00, 3.00, 4.00, 5.00, 6.00, 7.00, 8.00, 9.00, 10.00, 11.00, 12.00, 14.00, 15.00, 16.00, 17.00, 18.50, 20.00, 22.50, 25.00, 30.00 ), new TimeDiscretizationFromArray(0.00, 1.00, 2.00, 3.00, 4.00, 5.00, 6.00, 7.00, 8.00, 9.00, 10.00, 11.00, 12.00, 14.00, 15.00, 16.00, 17.00, 18.50, 20.00, 22.50, 25.00, 30.00 ), 0.40 / 100);
//			final LIBORVolatilityModel volatilityModel = new LIBORVolatilityModelPiecewiseConstant(timeDiscretizationFromArray, liborPeriodDiscretization, optionMaturityDiscretization, timeToMaturityDiscretization, 0.40 / 100, true);
		
		// If simulation time is below libor time, exceptions will be hard to track.
			final double lastTime	= 25.0;
			final double dt		= 0.003;
			//final double dt		= 0.003;
			final TimeDiscretizationFromArray timeDiscretizationFromArray = new TimeDiscretizationFromArray(0.0, (int) (lastTime / dt), dt);
			final TimeDiscretization liborPeriodDiscretization = timeDiscretizationFromArray;
			
			final BrownianMotion brownianMotion = new net.finmath.montecarlo.BrownianMotionLazyInit(timeDiscretizationFromArray, numberOfFactors, numberOfPaths, 31415 /* seed */);
	
			LIBORModelMonteCarloSimulationModel simulationCalibrated = null;
			
			TimeDiscretization timeToMaturityDiscretization = new TimeDiscretizationFromArray(0.00,	1,0, 2.00, 7.00, 8.00, 9,00, 10.0,15.0,20.0,25.0);
			double[] arrayValues = new double [timeToMaturityDiscretization.getNumberOfTimes()];
			for (int i=0; i<timeToMaturityDiscretization.getNumberOfTimes(); i++) {arrayValues[i]= 0.2/100;}

			final LIBORVolatilityModel volatilityModel = new LIBORVolatilityModelTimeHomogenousPiecewiseConstant(timeDiscretizationFromArray, liborPeriodDiscretization, timeToMaturityDiscretization, arrayValues);
			final LIBORCorrelationModel correlationModel = new LIBORCorrelationModelExponentialDecay(timeDiscretizationFromArray, liborPeriodDiscretization, numberOfFactors, 0.05, false);
			
//			AbstractLIBORCovarianceModelParametric covarianceModelParametric = new LIBORCovarianceModelExponentialForm5Param(timeDiscretizationFromArray, liborPeriodDiscretization, numberOfFactors, new double[] { 0.20/100.0, 0.05/100.0, 0.10, 0.05/100.0, 0.10} );
			AbstractLIBORCovarianceModelParametric	covarianceModelParametric = new LIBORCovarianceModelFromVolatilityAndCorrelation(timeDiscretizationFromArray, liborPeriodDiscretization, volatilityModel, correlationModel);

//			final AbstractLIBORCovarianceModelParametric covarianceModelBlended = new BlendedLocalVolatilityModel(covarianceModelParametric, 0.0, false);
			final AbstractLIBORCovarianceModelParametric covarianceModelDisplaced = new DisplacedLocalVolatilityModel(covarianceModelParametric, 1.0/0.25, false /* isCalibrateable */);

			final TimeDiscretization tenorTimeScalingDiscretization = new TimeDiscretizationFromArray(0.0, 25.0, 0.25, ShortPeriodLocation.SHORT_PERIOD_AT_START);
			final double[] tenorTimeScalings = new double[tenorTimeScalingDiscretization.getNumberOfTimes()];
			Arrays.fill(tenorTimeScalings, 0.0);
			final TermStructureTenorTimeScalingInterface tenorTimeScalingModel = new TermStructureTenorTimeScalingPicewiseConstant(tenorTimeScalingDiscretization, tenorTimeScalings);

			// Create blended local volatility model with fixed parameter 0.0 (that is "lognormal").
			double[] scalingAndVol= new double[tenorTimeScalingDiscretization.getNumberOfTimes()+volatilityModel.getParameter().length-1  ];
			for (int j=0;j<(tenorTimeScalingDiscretization.getNumberOfTimes()+volatilityModel.getParameter().length-1);j++)
			{
			   scalingAndVol[j]= paramTimeScalingVolParam[j];
			}
			
			
			TermStructureCovarianceModelParametric termStructureCovarianceModel = new TermStructCovarianceModelFromLIBORCovarianceModelParametric(tenorTimeScalingModel, covarianceModelParametric );
			termStructureCovarianceModel = termStructureCovarianceModel.getCloneWithModifiedParameters(scalingAndVol);
			double[] bestParameters = null;
			for(int i = 0; i<1; i++) {
				if(i>0) {
					termStructureCovarianceModel = termStructureCovarianceModel.getCloneWithModifiedParameters(bestParameters);
				}
				// Set model properties
				final Map<String, Object> properties = new HashMap<>();

				final Double accuracy = 1E-12;
				final int maxIterations = 400;
				final int numberOfThreads = 6;
				final OptimizerFactory optimizerFactory = new OptimizerFactoryLevenbergMarquardt(maxIterations, accuracy, numberOfThreads);

				final double[] parameterStandardDeviation = new double[termStructureCovarianceModel.getParameter().length];
				final double[] parameterLowerBound = new double[termStructureCovarianceModel.getParameter().length];
				final double[] parameterUpperBound = new double[termStructureCovarianceModel.getParameter().length];
				Arrays.fill(parameterStandardDeviation, i==0 ? 0.0020/100.0 : 0.2/100.0);
				Arrays.fill(parameterLowerBound, Double.NEGATIVE_INFINITY);
				Arrays.fill(parameterUpperBound, Double.POSITIVE_INFINITY);

				//				optimizerFactory = new OptimizerFactoryCMAES(accuracy, maxIterations, parameterLowerBound, parameterUpperBound, parameterStandardDeviation);

				// Set calibration properties (should use our brownianMotion for calibration - needed to have to right correlation).
				final Map<String, Object> calibrationParameters = new HashMap<>();
				calibrationParameters.put("accuracy", accuracy);
				calibrationParameters.put("brownianMotion", brownianMotion);
				calibrationParameters.put("parameterStep", i == 0 ? new Double(1E-6) : new Double(5E-5) );
				calibrationParameters.put("optimizerFactory", optimizerFactory);
				properties.put("calibrationParameters", calibrationParameters);

				System.out.println("Number of volatility parameters: " + volatilityModel.getParameter().length);
				//System.out.println("Number of correlation parameters: " + correlationModel.getParameter().length);
				System.out.println("Number of scaling parameters: " + tenorTimeScalingModel.getParameter().length);

				System.out.println("Number of covariance parameters: " + termStructureCovarianceModel.getParameter().length);
				
				System.out.println("Number of scalingAndVol parameters: " + scalingAndVol.length);

				/*
				 * Create corresponding LIBOR Market Model
				 * 7 days + 3 weeks + 2 month, 1 quarter + 39 semi-annuals
				 */
				final TimeDiscretization liborPeriodDiscretizationDaily = new TimeDiscretizationFromArray(0.0, 25.0, 0.003, ShortPeriodLocation.SHORT_PERIOD_AT_START);
				final TimeDiscretization liborPeriodDiscretizationWeekly = new TimeDiscretizationFromArray(0.0, 25.0, 0.02, ShortPeriodLocation.SHORT_PERIOD_AT_START);
				final TimeDiscretization liborPeriodDiscretizationMonthly = new TimeDiscretizationFromArray(0.0, 25.0, 0.1, ShortPeriodLocation.SHORT_PERIOD_AT_START);
				final TimeDiscretization liborPeriodDiscretizationQuarterly = new TimeDiscretizationFromArray(0.0, 25.0, 0.25, ShortPeriodLocation.SHORT_PERIOD_AT_START);
				final TimeDiscretization liborPeriodDiscretizationSemiannual = new TimeDiscretizationFromArray(0.0, 25.0, 0.5, ShortPeriodLocation.SHORT_PERIOD_AT_START);

				final TermStructureModel liborMarketModelCalibrated = new LIBORMarketModelWithTenorRefinement(
						new TimeDiscretization[] { liborPeriodDiscretizationDaily, liborPeriodDiscretizationWeekly, liborPeriodDiscretizationMonthly,liborPeriodDiscretizationQuarterly,liborPeriodDiscretizationSemiannual},
						new Integer[] { 7, 3, 2, 1, 200 },
						//new TimeDiscretization[] { liborPeriodDiscretizationMonthly,liborPeriodDiscretizationQuarterly,liborPeriodDiscretizationSemiannual},
						//new Integer[] {  2, 1, 200 },
						curveModel,
						forwardCurve,
						new DiscountCurveFromForwardCurve(forwardCurve),
						termStructureCovarianceModel,
						calibrationProducts.toArray(new CalibrationProduct[0]), 
						properties		
				);

				System.out.println("\nCalibrated parameters are:");
				final double[] param = ((LIBORMarketModelWithTenorRefinement) liborMarketModelCalibrated).getCovarianceModel().getParameter();
				//		((AbstractLIBORCovarianceModelParametric) liborMarketModelCalibrated.getCovarianceModel()).setParameter(param);
				for (final double p : param) {
					System.out.println(p);
				}
				bestParameters = param;

				final EulerSchemeFromProcessModel process = new EulerSchemeFromProcessModel(brownianMotion);
				simulationCalibrated = new LIBORMonteCarloSimulationFromTermStructureModel(liborMarketModelCalibrated, process);
			}
		System.out.println("\nValuation on calibrated model:");
		double deviationSum			= 0.0;
		double deviationSquaredSum	= 0.0;
		for (int i = 0; i < calibrationProducts.size(); i++) {
			final AbstractLIBORMonteCarloProduct calibrationProduct = calibrationProducts.get(i).getProduct();
			try {
				final double valueModel = calibrationProduct.getValue(simulationCalibrated);
				final double valueTarget = calibrationProducts.get(i).getTargetValue().getAverage();
				final double error = valueModel-valueTarget;
				deviationSum += error;
				deviationSquaredSum += error*error;
				System.out.println(calibrationItemNames.get(i) + "\t" + "Model: " + formatterValue.format(valueModel) + "\t Target: " + formatterValue.format(valueTarget) + "\t Deviation: " + formatterDeviation.format(valueModel-valueTarget));// + "\t" + calibrationProduct.toString());
			}
			catch(final Exception e) {
			}
		}

		final double averageDeviation = deviationSum/calibrationProducts.size();
		System.out.println("Mean Deviation:" + formatterValue.format(averageDeviation));
		System.out.println("RMS Error.....:" + formatterValue.format(Math.sqrt(deviationSquaredSum/calibrationProducts.size())));
		System.out.println("__________________________________________________________________________________________\n");

		Assert.assertTrue(Math.abs(averageDeviation) < 1E-2);
		
		// CAPLET ON BACKWARD LOOKING RATE SEMESTRALI
		DecimalFormat formatterTimeValue = new DecimalFormat("##0.00;");
		DecimalFormat formatterVolValue = new DecimalFormat("##0.00000;");
		DecimalFormat formatterAnalytic = new DecimalFormat("##0.000;");
		DecimalFormat formatterPercentage = new DecimalFormat(" ##0.000%;-##0.000%", new DecimalFormatSymbols(Locale.ENGLISH));
	
		double strike = 0.004783;
		double dtLibor = 0.5;
		
		double[] mktData = new double[] {/* 6M 0.00167, */ /* 12M*/ 0.00201, /* 18M*/ 0.00228, /* 2Y */ 0.00264, 0.0, /* 3Y */ 0.0033, /* 4Y */0.00406, /* 5Y */ 0.00455, /* 6Y - NA */ 0.0, /* 7Y */0.00513, /* 8Y- NA */0.0, /* 9Y */0.0, /* 10Y */0.00550,0.0,0.0,0.0,0.0, /* 15Y */0.00544,0.0,0.0,0.0,0.0, /* 20Y */0.0053,0.0,0.0,0.0};
	
		int mktDataIndex = 0;

		//Results with CALIBRATED model
		System.out.println("\n results on CALIBRATED model \n");
		double beginLiborTime = 0.5;
		while(beginLiborTime < liborPeriodDiscretization.getTime(liborPeriodDiscretization.getNumberOfTimes()-1)) {
			Caplet capletCassical = new Caplet(beginLiborTime, dtLibor, strike, dtLibor, false, ValueUnit.NORMALVOLATILITY);
			double capletMaturity = beginLiborTime+dtLibor;
			double impliedVolBackward = capletCassical.getValue(simulationCalibrated);
			double analyticFormulaPaper = Math.sqrt(1+0.5/(capletMaturity*3));
			if (beginLiborTime<2.5) {		//da i valori del caplet per maturity 1.5Y, 2Y, 2.5Y,.	
				if (mktData[mktDataIndex] == 0.0) {
				System.out.println("Caplet on B(" + formatterTimeValue.format(beginLiborTime) + ", "
						+ formatterTimeValue.format(capletMaturity) + "; "
						+ "" + formatterTimeValue.format(capletMaturity) + "). Implied vol.: "
						+ formatterPercentage.format(impliedVolBackward)+ "  Analytic result: " 
						+ formatterAnalytic.format(analyticFormulaPaper) );
				beginLiborTime+=0.5;
				mktDataIndex+=1;
				}
				else {

					double ratioMktVol =impliedVolBackward/mktData[mktDataIndex];
					System.out.println("Caplet on B(" + formatterTimeValue.format(beginLiborTime) + ", "
							+ formatterTimeValue.format(capletMaturity) + "; "
							+ "" + formatterTimeValue.format(capletMaturity) + "). Implied vol.: "
							+ formatterPercentage.format(impliedVolBackward) + "  Analytic result: " 
							+ formatterAnalytic.format(analyticFormulaPaper) 
							+ "  Mkt vol. " + mktData[mktDataIndex]
							+ "  Ratio Mkt: "	+ formatterAnalytic.format(ratioMktVol)	
							+ "  Error Mkt: "	+ formatterPercentage.format((ratioMktVol-analyticFormulaPaper)/ratioMktVol)
							);
					beginLiborTime+=0.5;
					mktDataIndex+=1;
				}
				
			}
			else {	//secondo loop da i valori del caplet per maturity 4Y,5Y,...,21
	
				if (mktData[mktDataIndex] == 0.0) {
					System.out.println("Caplet on B(" + formatterTimeValue.format(beginLiborTime) + ", "
							+ formatterTimeValue.format(capletMaturity) + "; "
							+ "" + formatterTimeValue.format(capletMaturity) + "). Implied vol.: " 
							+ formatterPercentage.format(impliedVolBackward) + "  Analytic result: " 
							+ formatterAnalytic.format(analyticFormulaPaper) );
					beginLiborTime+=1;
					mktDataIndex+=1;
					}
					else {
						double ratioMktVol =impliedVolBackward/mktData[mktDataIndex];
						System.out.println("Caplet on B(" + formatterTimeValue.format(beginLiborTime) + ", "
								+ formatterTimeValue.format(capletMaturity) + "; "
								+ "" + formatterTimeValue.format(capletMaturity) + "). Implied vol.: " 
								+ formatterPercentage.format(impliedVolBackward) + "  Analytic result: " 
								+ formatterAnalytic.format(analyticFormulaPaper)  
								+ "  Mkt vol. " + mktData[mktDataIndex]
								+ "  Ratio Mkt: "	+ formatterAnalytic.format(ratioMktVol)	
								+ "  Error Mkt: "	+ formatterPercentage.format((ratioMktVol-analyticFormulaPaper)/ratioMktVol)
								);
						beginLiborTime+=1;
						mktDataIndex+=1;
					}
			}
		}
		
		//  Backward looking rate values
		System.out.println("\n Backward looking rate:");
		for( beginLiborTime=0.0; beginLiborTime<liborPeriodDiscretization.getTime(liborPeriodDiscretization.getNumberOfTimes()-1); beginLiborTime+=1) {
			double endLiborTime=beginLiborTime+dtLibor;
			RandomVariable backwardLookingRate =  simulationCalibrated.getLIBOR(beginLiborTime, beginLiborTime,endLiborTime);
			double avgBackwardLookingRate =backwardLookingRate.getAverage();
			System.out.println("Backward B(" + formatterTimeValue.format(beginLiborTime) +  ", " + formatterTimeValue.format(endLiborTime) + ") evaluated in t= " + formatterTimeValue.format(endLiborTime) + ", avg. value " + formatterVolValue.format(avgBackwardLookingRate));
		}
		
		
		
		
	}

		
		
		public AnalyticModel getCalibratedCurve() throws SolverException {
			final String[] maturity					= { "1D", "7D", "14D", "21D", "1M", "2M", "3M", "4M", "5M", "6M", "7M", "8M", "9M", "12M", "15M", "18M", "21M", "2Y", "3Y", "4Y", "5Y", "6Y", "7Y", "8Y", "9Y", "10Y", "11Y", "12Y", "15Y", "20Y", "25Y", "30Y", "40Y", "50Y" };
			final String[] frequency				= { "tenor", "tenor", "tenor",  "tenor", "tenor", "tenor", "tenor", "tenor", "tenor", "tenor", "tenor", "tenor", "tenor", "tenor", "annual", "annual", "annual", "annual", "annual", "annual", "annual", "annual", "annual", "annual", "annual", "annual", "annual", "annual", "annual", "annual", "annual", "annual", "annual", "annual"};
			final String[] frequencyFloat			= { "tenor", "tenor", "tenor",  "tenor", "tenor", "tenor", "tenor", "tenor", "tenor", "tenor", "tenor", "tenor", "tenor", "tenor", "annual", "annual", "annual", "annual", "annual", "annual", "annual", "annual", "annual", "annual", "annual", "annual", "annual", "annual", "annual", "annual", "annual", "annual", "annual", "annual"};
			final String[] daycountConventions	    = { "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360"};
			final String[] daycountConventionsFloat	= { "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360", "ACT/360"};
			final double[] rates					= { -0.0055, -0.00553, -0.00553, -0.00553, -0.00553, -0.00555, -0.00556, -0.00559, -0.00564, -0.00568, -0.00572, -0.00577, -0.00581, -0.00592, -0.00601, -0.00608, -0.00613, -0.00619, -0.00627, -0.00622, -0.00606, -0.00582, -0.00553, -0.00519, -0.00482, -0.00442, -0.00402, -0.00362, -0.00261, -0.00189, -0.00197, -0.0023, -0.00286, -0.00333};
			final HashMap<String, Object> parameters = new HashMap<>();

			parameters.put("referenceDate", LocalDate.of(2020, Month.JULY, 31));
			parameters.put("currency", "EUR");
			parameters.put("forwardCurveTenor", "1D");
			parameters.put("maturities", maturity);
			parameters.put("fixLegFrequencies", frequency);
			parameters.put("floatLegFrequencies", frequencyFloat);
			parameters.put("fixLegDaycountConventions", daycountConventions);
			parameters.put("floatLegDaycountConventions", daycountConventionsFloat);
			parameters.put("rates", rates);

		return getCalibratedCurve(null, parameters);
	}

	private static AnalyticModel getCalibratedCurve(final AnalyticModel model2, final Map<String, Object> parameters) throws SolverException {

		final LocalDate	referenceDate		= (LocalDate) parameters.get("referenceDate");
		final String	currency			= (String) parameters.get("currency");
		final String	forwardCurveTenor	= (String) parameters.get("forwardCurveTenor");
		final String[]	maturities			= (String[]) parameters.get("maturities");
		final String[]	frequency			= (String[]) parameters.get("fixLegFrequencies");
		final String[]	frequencyFloat		= (String[]) parameters.get("floatLegFrequencies");
		final String[]	daycountConventions	= (String[]) parameters.get("fixLegDaycountConventions");
		final String[]	daycountConventionsFloat	= (String[]) parameters.get("floatLegDaycountConventions");
		final double[]	rates						= (double[]) parameters.get("rates");

		Assert.assertEquals(maturities.length, frequency.length);
		Assert.assertEquals(maturities.length, daycountConventions.length);
		Assert.assertEquals(maturities.length, rates.length);

		Assert.assertEquals(frequency.length, frequencyFloat.length);
		Assert.assertEquals(daycountConventions.length, daycountConventionsFloat.length);

		final int		spotOffsetDays = 2;
		final String	forwardStartPeriod = "0D";

		final String curveNameDiscount = "discountCurve-" + currency;

		/*
		 * We create a forward curve by referencing the same discount curve, since
		 * this is a single curve setup.
		 *
		 * Note that using an independent NSS forward curve with its own NSS parameters
		 * would result in a problem where both, the forward curve and the discount curve
		 * have free parameters.
		 */
		final ForwardCurve forwardCurve		= new ForwardCurveFromDiscountCurve(curveNameDiscount, referenceDate, forwardCurveTenor);

		// Create a collection of objective functions (calibration products)
		final Vector<AnalyticProduct> calibrationProducts = new Vector<>();
		final double[] curveMaturities	= new double[rates.length+1];
		final double[] curveValue			= new double[rates.length+1];
		final boolean[] curveIsParameter	= new boolean[rates.length+1];
		curveMaturities[0] = 0.0;
		curveValue[0] = 1.0;
		curveIsParameter[0] = false;
		for(int i=0; i<rates.length; i++) {
//			scheduleRec=scheduleReceiveLeg; schedulePay=schedulePayLeg
			final Schedule schedulePay = ScheduleGenerator.createScheduleFromConventions(referenceDate, spotOffsetDays, forwardStartPeriod, maturities[i], frequency[i], daycountConventions[i], "first", "following", new BusinessdayCalendarExcludingTARGETHolidays(), -2, 0);
			final Schedule scheduleRec = ScheduleGenerator.createScheduleFromConventions(referenceDate, spotOffsetDays, forwardStartPeriod, maturities[i], frequencyFloat[i], daycountConventionsFloat[i], "first", "following", new BusinessdayCalendarExcludingTARGETHolidays(), -2, 0);

			curveMaturities[i+1] = Math.max(schedulePay.getPayment(schedulePay.getNumberOfPeriods()-1),scheduleRec.getPayment(scheduleRec.getNumberOfPeriods()-1));
			curveValue[i+1] = 1.0;
			curveIsParameter[i+1] = true;
			calibrationProducts.add(new Swap(schedulePay, null, rates[i], curveNameDiscount, scheduleRec, forwardCurve.getName(), 0.0, curveNameDiscount));
		} 

		final InterpolationMethod interpolationMethod = InterpolationMethod.LINEAR;

		// Create a discount curve
		final DiscountCurveInterpolation discountCurveInterpolation = DiscountCurveInterpolation.createDiscountCurveFromDiscountFactors(
				curveNameDiscount								/* name */,
				referenceDate	/* referenceDate */,
				curveMaturities	/* maturities */,
				curveValue		/* discount factors */,
				curveIsParameter,
				interpolationMethod ,
				ExtrapolationMethod.CONSTANT,
				InterpolationEntity.LOG_OF_VALUE
				);

		/*
		 * Model consists of the two curves, but only one of them provides free parameters.
		 */
		AnalyticModel model = new AnalyticModelFromCurvesAndVols(new Curve[] { discountCurveInterpolation, forwardCurve });

		/*
		 * Create a collection of curves to calibrate
		 */
		final Set<ParameterObject> curvesToCalibrate = new HashSet<>();
		curvesToCalibrate.add(discountCurveInterpolation);

		/*
		 * Calibrate the curve
		 */
		final Solver solver = new Solver(model, calibrationProducts);
		final AnalyticModel calibratedModel = solver.getCalibratedModel(curvesToCalibrate);
		System.out.println("Solver reported acccurary....: " + solver.getAccuracy());

		Assert.assertEquals("Calibration accurarcy", 0.0, solver.getAccuracy(), 1E-3);

		// Get best parameters
		final double[] parametersBest = calibratedModel.getDiscountCurve(discountCurveInterpolation.getName()).getParameter();

		// Test calibration
		model			= calibratedModel;

//--> praticamente il calibrato valore di calibrationProducts (che sono swap) deve essere = 0 --> penso perchÃ¨ il prezzo dello swap deve essere = 0 per definizione, quindi in teoria gli interest definiti sono L_i - S e quando calibri questa differenza deve essere =0 (e se cosÃ¬ Ã¨ allora il prezzo dello swap Ã¨ 0) --> avrebbe anche senso perchÃ¨ se noti il payer ha tassi prima negativi e poi positivi, mentre quell'altro ha tassi sempre = 0 (cioÃ¨ L=S, cioÃ¨ Ã¨ quello che paga il fixed swap rate)
		double squaredErrorSum = 0.0;
		for(final AnalyticProduct c : calibrationProducts) {
			final double value = c.getValue(0.0, model);
			final double valueTaget = 0.0;
			final double error = value - valueTaget;
			squaredErrorSum += error*error;
		}
		final double rms = Math.sqrt(squaredErrorSum/calibrationProducts.size());

		System.out.println("Independent checked acccurary: " + rms);

		System.out.println("Calibrated discount curve: ");
		for(int i=0; i<curveMaturities.length; i++) {
			final double maturity = curveMaturities[i];
			System.out.println(maturity + "\t" + calibratedModel.getDiscountCurve(discountCurveInterpolation.getName()).getDiscountFactor(maturity));
		}
		return model;
	}

	private static double getParSwaprate(final ForwardCurve forwardCurve, final DiscountCurve discountCurve, final double[] swapTenor) {
		return net.finmath.marketdata.products.Swap.getForwardSwapRate(new TimeDiscretizationFromArray(swapTenor), new TimeDiscretizationFromArray(swapTenor), forwardCurve, discountCurve);
	}
}
